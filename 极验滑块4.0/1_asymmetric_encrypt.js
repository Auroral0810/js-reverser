t = [214, 144, 233, 254, 204, 225, 61, 183, 22, 182, 20, 194, 40, 251, 44, 5, 43, 103, 154, 118, 42, 190, 4, 195, 170, 68, 19, 38, 73, 134, 6, 153, 156, 66, 80, 244, 145, 239, 152, 122, 51, 84, 11, 67, 237, 207, 172, 98, 228, 179, 28, 169, 201, 8, 232, 149, 128, 223, 148, 250, 117, 143, 63, 166, 71, 7, 167, 252, 243, 115, 23, 186, 131, 89, 60, 25, 230, 133, 79, 168, 104, 107, 129, 178, 113, 100, 218, 139, 248, 235, 15, 75, 112, 86, 157, 53, 30, 36, 14, 94, 99, 88, 209, 162, 37, 34, 124, 59, 1, 33, 120, 135, 212, 0, 70, 87, 159, 211, 39, 82, 76, 54, 2, 231, 160, 196, 200, 158, 234, 191, 138, 210, 64, 199, 56, 181, 163, 247, 242, 206, 249, 97, 21, 161, 224, 174, 93, 164, 155, 52, 26, 85, 173, 147, 50, 48, 245, 140, 177, 227, 29, 246, 226, 46, 130, 102, 202, 96, 192, 41, 35, 171, 13, 83, 78, 111, 213, 219, 55, 69, 222, 253, 142, 47, 3, 255, 106, 114, 109, 108, 91, 81, 141, 27, 175, 146, 187, 221, 188, 127, 17, 217, 92, 65, 31, 16, 90, 216, 10, 193, 49, 136, 165, 205, 123, 189, 45, 116, 208, 18, 184, 229, 180, 176, 137, 105, 151, 74, 12, 150, 119, 126, 101, 185, 241, 9, 197, 110, 198, 132, 24, 240, 125, 236, 58, 220, 77, 32, 121, 238, 95, 62, 215, 203, 57, 72]
n = [462357, 472066609, 943670861, 1415275113, 1886879365, 2358483617, 2830087869, 3301692121, 3773296373, 4228057617, 404694573, 876298825, 1347903077, 1819507329, 2291111581, 2762715833, 3234320085, 3705924337, 4177462797, 337322537, 808926789, 1280531041, 1752135293, 2223739545, 2695343797, 3166948049, 3638552301, 4110090761, 269950501, 741554753, 1213159005, 1684763257]
i = [2746333894, 1453994832, 1736282519, 2993693404];

// 首先定义_ᕸᖙᕹᕷ数组
var _ᕸᖙᕹᕷ = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, null, null, null, null, null, null, null, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, null, null, null, null, null, null, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35];

function _ᖁᕺᖗᕿ() {
    var rsa = {
        'n': null, 'e': 0, 'd': null, 'p': null, 'q': null, 'dmp1': null, 'dmq1': null, 'coeff': null
    };

    setPublic.call(rsa, '00C1E3934D1614465B33053E7F48EE4EC87B14B95EF88947713D25EECBFF7E74C7977D02DC1D9451F79DD5D1C10C29ACB6A9B4D6FB7D0A0279B6719E1772565F09AF627715919221AEF91899CAE08C0D686D748B20A3603BE2318CA6BC2B59706592A9219D0BF05C9F65023A21D2330807252AE0066D59CEEFA5F2748EA80BAB81', '10001');

    // 只保留需要的属性
    var result = {
        n: {}, e: rsa.e, d: null, p: null, q: null, dmp1: null, dmq1: null, coeff: null
    };

    // 复制n的必要属性
    for (var i = 0; i < rsa.n.t; i++) {
        result.n[i] = rsa.n[i];
    }
    result.n.t = rsa.n.t;
    result.n.s = rsa.n.s;

    return result;
}

function setPublic(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
    null != _ᕶᖉᖃᕾ && null != _ᕶᕴᕹᕶ && 0 < _ᕶᖉᖃᕾ['length'] && 0 < _ᕶᕴᕹᕶ['length'] ? (this['n'] = function _ᖚᖆᖀᖃ(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
        return new b(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ)
    }(_ᕶᖉᖃᕾ, 16), this['e'] = parseInt(_ᕶᕴᕹᕶ, 16)) : console && console['error'] && console['error']('Invalid RSA public key')
}

function b(_ᕶᖉᖃᕾ, _ᖄᕿᖚᕺ, _ᕶᖆᕷᕵ) {
    this.DB = 28; // 数字位数
    this.DM = (1 << 28) - 1; // 掩码
    this.DV = (1 << 28); // 除数
    this.FV = Math.pow(2, 52);
    this.F1 = 52 - 28;
    this.F2 = 2 * 28 - 52;

    // 初始化数组
    this.t = 0;
    this.s = 0;

    null != _ᕶᖉᖃᕾ && ('number' == typeof _ᕶᖉᖃᕾ ? this.fromNumber(_ᕶᖉᖃᕾ, _ᖄᕿᖚᕺ, _ᕶᖆᕷᕵ) : null == _ᖄᕿᖚᕺ && 'string' != typeof _ᕶᖉᖃᕾ ? this.fromString(_ᕶᖉᖃᕾ, 256) : this.fromString(_ᕶᖉᖃᕾ, _ᖄᕿᖚᕺ));
}


// 将fromString方法添加到b的原型中
b.prototype.fromString = function (_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
    var _ᖉᕹᕺᖀ;
    if (16 == _ᕶᕴᕹᕶ) _ᖉᕹᕺᖀ = 4; else if (8 == _ᕶᕴᕹᕶ) _ᖉᕹᕺᖀ = 3; else if (256 == _ᕶᕴᕹᕶ) _ᖉᕹᕺᖀ = 8; else if (2 == _ᕶᕴᕹᕶ) _ᖉᕹᕺᖀ = 1; else if (32 == _ᕶᕴᕹᕶ) _ᖉᕹᕺᖀ = 5; else {
        if (4 != _ᕶᕴᕹᕶ) return void this.fromRadix(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ);
        _ᖉᕹᕺᖀ = 2;
    }
    this.t = 0;
    this.s = 0;
    var _ᕺᖗᕾᖗ, _ᕿᕵᖆᕾ, _ᕶᖃᖁᕹ = _ᕶᖉᖃᕾ.length, _ᖗᖂᖉᖁ = !1, _ᕴᕺᖙᕷ = 0;
    while (0 <= --_ᕶᖃᖁᕹ) {
        var _ = 8 == _ᖉᕹᕺᖀ ? 255 & +_ᕶᖉᖃᕾ[_ᕶᖃᖁᕹ] : (_ᕺᖗᕾᖗ = _ᕶᖃᖁᕹ, null == (_ᕿᕵᖆᕾ = _ᕸᖙᕹᕷ[_ᕶᖉᖃᕾ.charCodeAt(_ᕺᖗᕾᖗ)]) ? -1 : _ᕿᕵᖆᕾ);
        _ < 0 ? '-' == _ᕶᖉᖃᕾ.charAt(_ᕶᖃᖁᕹ) && (_ᖗᖂᖉᖁ = !0) : (_ᖗᖂᖉᖁ = !1, 0 == _ᕴᕺᖙᕷ ? this[this.t++] = _ : _ᕴᕺᖙᕷ + _ᖉᕹᕺᖀ > this.DB ? (this[this.t - 1] |= (_ & (1 << this.DB - _ᕴᕺᖙᕷ) - 1) << _ᕴᕺᖙᕷ, this[this.t++] = _ >> this.DB - _ᕴᕺᖙᕷ) : this[this.t - 1] |= _ << _ᕴᕺᖙᕷ, (_ᕴᕺᖙᕷ += _ᖉᕹᕺᖀ) >= this.DB && (_ᕴᕺᖙᕷ -= this.DB));
    }
    8 == _ᖉᕹᕺᖀ && 0 != (128 & _ᕶᖉᖃᕾ[0]) && (this.s = -1, 0 < _ᕴᕺᖙᕷ && (this[this.t - 1] |= (1 << this.DB - _ᕴᕺᖙᕷ) - 1 << _ᕴᕺᖙᕷ));
    this.clamp();
    _ᖗᖂᖉᖁ && b.ZERO.subTo(this, this);
}

// 将clamp方法添加到b的原型中
b.prototype.clamp = function () {
    var _ᖀᖄᕴᖄ = this.s & this.DM;
    while (0 < this.t && this[this.t - 1] == _ᖀᖄᕴᖄ) --this.t;
}

// 添加subTo方法
b.prototype.subTo = function (a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while (i < a.t) {
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
}

// 添加ZERO静态属性
b.ZERO = new b('0', 16);


function bitLength() {
    return this['t'] <= 0 ? 0 : this['DB'] * (this['t'] - 1) + y(this[this['t'] - 1] ^ this['s'] & this['DM'])
}

function _ᖚᖆᖀᖃ(_ᕶᖉᖃᕾ) {
    var _ᕹᕿᖆᖀ = function _ᖚᖆᖀᖃ(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
        if (_ᕶᕴᕹᕶ < _ᕶᖉᖃᕾ['length'] + 11) return console && console['error'] && console['error']('Message too long for RSA'), null;
        var _ᖉᕹᕺᖀ = [], _ᕿᕵᖆᕾ = _ᕶᖉᖃᕾ['length'] - 1;
        while (0 <= _ᕿᕵᖆᕾ && 0 < _ᕶᕴᕹᕶ) {
            var i = _ᕶᖉᖃᕾ['charCodeAt'](_ᕿᕵᖆᕾ--);
            i < 128 ? _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = i : 127 < i && i < 2048 ? (_ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = 63 & i | 128, _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = i >> 6 | 192) : (_ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = 63 & i | 128, _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = i >> 6 & 63 | 128, _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = i >> 12 | 224)
        }
        _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = 0;
        var _ᕶᖃᖁᕹ = new _ᕺᖗᕾᖗ, _ᖗᖂᖉᖁ = [];
        while (2 < _ᕶᕴᕹᕶ) {
            _ᖗᖂᖉᖁ[0] = 0;
            while (0 == _ᖗᖂᖉᖁ[0]) _ᕶᖃᖁᕹ['nextBytes'](_ᖗᖂᖉᖁ);
            _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = _ᖗᖂᖉᖁ[0]
        }
        return _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = 2, _ᖉᕹᕺᖀ[--_ᕶᕴᕹᕶ] = 0, new b(_ᖉᕹᕺᖀ)
    }(_ᕶᖉᖃᕾ, 1024 + 7 >> 3);
    if (null == _ᕹᕿᖆᖀ) return null;
    var s = doPublic(_ᕹᕿᖆᖀ);
    if (null == s) return null;
    var n = s['toString'](16);
    return 0 == (1 & n['length']) ? n : '0' + n
}

function doPublic(_ᕶᖉᖃᕾ) {
    return modPowInt(this['e'], this['n'])//this['e'] = 65537,n = n
}

function modPowInt(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
    var _ᕿᕵᖆᕾ;
    return _ᕿᕵᖆᕾ = _ᕶᖉᖃᕾ < 256 || _ᕶᕴᕹᕶ['isEven']() ? new _ᕹᕿᖆᖀ(_ᕶᕴᕹᕶ) : new _ᖉᕹᕺᖀ(_ᕶᕴᕹᕶ), this['exp'](_ᕶᖉᖃᕾ, _ᕿᕵᖆᕾ)
}

function _ᖚᖆᖀᖃ(_ᕶᖉᖃᕾ) {
    if (this[_ᕶᖆᕷᕵ(4)] < 0)
        return _ᕶᖆᕷᕵ(5) + this['negate']()['toString'](_ᕶᖉᖃᕾ);
    var _ᕹᕿᖆᖀ;
    if (16 == _ᕶᖉᖃᕾ)
        _ᕹᕿᖆᖀ = 4;
    else if (8 == _ᕶᖉᖃᕾ)
        _ᕹᕿᖆᖀ = 3;
    else if (2 == _ᕶᖉᖃᕾ)
        _ᕹᕿᖆᖀ = 1;
    else if (32 == _ᕶᖉᖃᕾ)
        _ᕹᕿᖆᖀ = 5;
    else {
        if (4 != _ᕶᖉᖃᕾ)
            return this['toRadix'](_ᕶᖉᖃᕾ);
        _ᕹᕿᖆᖀ = 2
    }
    var _ᖉᕹᕺᖀ, _ᕺᖗᕾᖗ = (1 << _ᕹᕿᖆᖀ) - 1, _ᕿᕵᖆᕾ = !1, _ᕶᖃᖁᕹ = "", _ᖗᖂᖉᖁ = this['t'],
        _ᕸᖙᕹᕷ = this['DB'] - _ᖗᖂᖉᖁ * this['DB'] % _ᕹᕿᖆᖀ;
    if (0 < _ᖗᖂᖉᖁ--) {
        _ᕸᖙᕹᕷ < this['DB'] && 0 < (_ᖉᕹᕺᖀ = this[_ᖗᖂᖉᖁ] >> _ᕸᖙᕹᕷ) && (_ᕿᕵᖆᕾ = !0,
            _ᕶᖃᖁᕹ = m(_ᖉᕹᕺᖀ));
        while (0 <= _ᖗᖂᖉᖁ)
            _ᕸᖙᕹᕷ < _ᕹᕿᖆᖀ ? (_ᖉᕹᕺᖀ = (this[_ᖗᖂᖉᖁ] & (1 << _ᕸᖙᕹᕷ) - 1) << _ᕹᕿᖆᖀ - _ᕸᖙᕹᕷ,
                _ᖉᕹᕺᖀ |= this[--_ᖗᖂᖉᖁ] >> (_ᕸᖙᕹᕷ += this['DB'] - _ᕹᕿᖆᖀ)) : (_ᖉᕹᕺᖀ = this[_ᖗᖂᖉᖁ] >> (_ᕸᖙᕹᕷ -= _ᕹᕿᖆᖀ) & _ᕺᖗᕾᖗ,
            _ᕸᖙᕹᕷ <= 0 && (_ᕸᖙᕹᕷ += this['DB'],
                --_ᖗᖂᖉᖁ)),
            0 < _ᖉᕹᕺᖀ && (_ᕿᕵᖆᕾ = !0),
            _ᕿᕵᖆᕾ && (_ᕶᖃᖁᕹ += m(_ᖉᕹᕺᖀ))
    }
    return _ᕿᕵᖆᕾ ? _ᕶᖃᖁᕹ : "0"
}

function _ᖚᖆᖀᖃ(_ᕶᖉᖃᕾ, _ᕶᕴᕹᕶ) {
    if (4294967295 < _ᕶᖉᖃᕾ || _ᕶᖉᖃᕾ < 1)
        return b['ONE'];
    var _ᖉᕹᕺᖀ = w()
        , _ᕺᖗᕾᖗ = w()
        , _ᕿᕵᖆᕾ = _ᕶᕴᕹᕶ[_ᖄᕿᖚᕺ(1095)](this)
        , _ᕶᖃᖁᕹ = y(_ᕶᖉᖃᕾ) - 1;
    _ᕿᕵᖆᕾ['copyTo'](_ᖉᕹᕺᖀ);
    while (0 <= --_ᕶᖃᖁᕹ)
        if (_ᕶᕴᕹᕶ['sqrTo'](_ᖉᕹᕺᖀ, _ᕺᖗᕾᖗ),
        0 < (_ᕶᖉᖃᕾ & 1 << _ᕶᖃᖁᕹ))
            _ᕶᕴᕹᕶ['mulTo'](_ᕺᖗᕾᖗ, _ᕿᕵᖆᕾ, _ᖉᕹᕺᖀ);
        else {
            var o = _ᖉᕹᕺᖀ;
            _ᖉᕹᕺᖀ = _ᕺᖗᕾᖗ,
                _ᕺᖗᕾᖗ = o
        }
    return _ᕶᕴᕹᕶ['revert'](_ᖉᕹᕺᖀ)
}

console.log(_ᖚᖆᖀᖃ('123456'))
